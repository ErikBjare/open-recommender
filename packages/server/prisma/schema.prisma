// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  twitterId         String           @unique
  name              String
  username          String           @unique
  profile_image_url String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  tweets            Tweet[]
  summaries         Summary[]
  recommendations   Recommendation[]
  votes              Vote[]
  notes              Note[]
  follows            Follow[]
}

model Tweet {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Summary {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  data      Json
  content  String
  useForRecommendations Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RecommendationType {
  youtube
}

model Recommendation {
  id        Int                @id @default(autoincrement())
  userId    Int
  user      User               @relation(fields: [userId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  type      RecommendationType
  viewed   Boolean            @default(false)
  data      Json
  votes     Vote[]
  notes     Note[]
}

model Vote {
  id               Int            @id @default(autoincrement())
  userId           Int
  user             User           @relation(fields: [userId], references: [id])
  recommendationId Int
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
  vote             Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Note {
  id               Int            @id @default(autoincrement())
  userId           Int
  user             User           @relation(fields: [userId], references: [id])
  recommendationId Int
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
  content          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

enum FollowType {
  likes
  relevant
  all
}

model Follow {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  followId  Int
  follow    User     @relation(fields: [followId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followType FollowType
}